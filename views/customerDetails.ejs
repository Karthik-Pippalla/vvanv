<%- include("partials/header") %>
<!-- Include Header -->

<div class="container mt-4">
  <h2>Customer Details</h2>

  <!-- Customer Information -->
  <div class="card mb-4 shadow">
    <div class="card-body">
      <h4 class="card-title"><%= customer.name %></h4>
      <p><strong>Email:</strong> <%= customer.email %></p>
      <p><strong>Phone:</strong> <%= customer.phone %></p>
      <p><strong>Address:</strong> <%= customer.address %></p>
      <p><strong>Total Orders:</strong> <%= customer.orderHistory.length %></p>
      <a href="/customers" class="btn btn-secondary">Go Back</a>
      <button
        class="btn btn-warning edit-btn"
        data-bs-toggle="modal"
        data-bs-target="#editCustomerModal"
      >
        Edit
      </button>
      <button class="btn btn-danger delete-btn" data-id="<%= customer._id %>">
        Delete
      </button>
      <button
        class="btn btn-success"
        data-bs-toggle="modal"
        data-bs-target="#addOrderModal"
      >
        Add Order
      </button>
    </div>
  </div>

  <!-- Order History -->
  <h3>Order History</h3>
  <input
    type="text"
    id="search-orders"
    class="form-control mb-3"
    placeholder="Search Orders..."
  />
  <table class="table table-hover">
    <thead class="table-dark">
      <tr>
        <th>Order ID</th>
        <th>Date</th>
        <th>Total Amount</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody id="orders-table">
      <% customer.orderHistory.forEach(order => { %>
      <tr class="order-row" data-order-id="<%= order._id %>">
        <td>#<%= order._id.toString().slice(-6) %></td>
        <td><%= new Date(order.created_at).toLocaleDateString() %></td>
        <td>₹<%= order.totalAmount %></td>
        <td>
          <% if (order.status === "Pending") { %>
          <span class="badge bg-warning">Pending</span>
          <% } else if (order.status === "Processing") { %>
          <span class="badge bg-primary">Processing</span>
          <% } else if (order.status === "Completed") { %>
          <span class="badge bg-success">Completed</span>
          <% } else { %>
          <span class="badge bg-danger">Cancelled</span>
          <% } %>
        </td>
      </tr>
      <% }) %>
    </tbody>
  </table>
</div>

<!-- Edit Customer Modal -->
<div class="modal fade" id="editCustomerModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Customer</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <form id="editCustomerForm">
          <input
            type="hidden"
            id="edit-customer-id"
            value="<%= customer._id %>"
          />
          <div class="mb-3">
            <label class="form-label">Name</label>
            <input
              type="text"
              class="form-control"
              id="edit-customer-name"
              value="<%= customer.name %>"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Email</label>
            <input
              type="email"
              class="form-control"
              id="edit-customer-email"
              value="<%= customer.email %>"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Phone</label>
            <input
              type="text"
              class="form-control"
              id="edit-customer-phone"
              value="<%= customer.phone %>"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label">Address</label>
            <input
              type="text"
              class="form-control"
              id="edit-customer-address"
              value="<%= customer.address %>"
              required
            />
          </div>
          <button type="submit" class="btn btn-primary">Update Customer</button>
        </form>
      </div>
    </div>
  </div>
</div>
<!-- Add Order Modal -->
<div class="modal fade" id="addOrderModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Order</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <div class="input-group mb-3">
          <input
            type="text"
            id="search-menu"
            class="form-control"
            placeholder="Search Items..."
          />
          <button class="btn btn-secondary" id="search-menu-btn">Search</button>
        </div>
        <div id="menu-results"></div>
        <!-- ✅ Items will be displayed here -->

        <h5 class="mt-3">Order Items</h5>
        <ul id="selected-items" class="list-group"></ul>
        <h4 class="mt-3">Subtotal: ₹<span id="subtotal">0</span></h4>
        <h5>Discount: ₹<span id="discount">0</span></h5>
        <h3>Total: ₹<span id="total-price">0</span></h3>
        <button class="btn btn-info mt-3" id="previewOrder">
          Preview Order
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Order Preview Modal -->
<div class="modal fade" id="previewOrderModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Order Preview</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <ul id="order-preview-list" class="list-group"></ul>
        <h4 class="mt-3">Final Total: ₹<span id="final-total">0</span></h4>
        <button class="btn btn-success mt-3" id="saveOrder">
          Confirm & Save
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  let selectedItems = [];

  // ✅ Function to Fetch and Display Menu Items
  async function searchMenuItems() {
    let query = document.getElementById("search-menu").value.toLowerCase();
    let resultsContainer = document.getElementById("menu-results");
    resultsContainer.innerHTML = ""; // Clear previous results

    if (!query) return; // Stop if no input

    try {
      // ✅ Fetch matching menu items from the server
      const response = await fetch(`/menu/search?q=${query}`);
      const menuItems = await response.json();

      if (!menuItems.length) {
        resultsContainer.innerHTML = `<p class="text-muted">No items found</p>`;
        return;
      }

      // ✅ Show each matching item with a quantity input and "Add to Cart" button
      menuItems.forEach((item) => {
        let div = document.createElement("div");
        div.classList.add("card", "p-2", "mb-2");

        div.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6>${item.title}</h6>
                        <p>₹${item.price}</p>
                    </div>
                    <div class="d-flex align-items-center">
                        <input type="number" min="1" class="form-control qty-input me-2" 
                               style="width: 60px;" value="1" 
                               data-id="${item._id}" data-title="${item.title}" data-price="${item.price}">
                        <button class="btn btn-primary btn-sm add-to-cart" 
                                data-id="${item._id}" data-title="${item.title}" data-price="${item.price}">
                            Add
                        </button>
                    </div>
                </div>
            `;

        resultsContainer.appendChild(div);
      });

      // ✅ Attach event listeners to "Add to Cart" buttons dynamically
      document.querySelectorAll(".add-to-cart").forEach((button) => {
        button.addEventListener("click", function () {
          let inputField = this.previousElementSibling;
          let qty = parseInt(inputField.value);
          if (!qty || qty <= 0) return alert("Enter a valid quantity!");

          let itemId = this.getAttribute("data-id");
          let itemTitle = this.getAttribute("data-title");
          let itemPrice = parseFloat(this.getAttribute("data-price"));

          // Check if the item is already in the cart
          let existingItem = selectedItems.find((i) => i.id === itemId);
          if (existingItem) {
            existingItem.qty += qty;
          } else {
            selectedItems.push({
              id: itemId,
              title: itemTitle,
              price: itemPrice,
              qty: qty,
            });
          }

          updateOrderSummary();
        });
      });
    } catch (error) {
      console.error("Error fetching menu items:", error);
      resultsContainer.innerHTML = `<p class="text-danger">Error fetching items</p>`;
    }
  }

  // ✅ Attach Search Trigger to "Search" Button
  document
    .getElementById("search-menu-btn")
    .addEventListener("click", searchMenuItems);

  // ✅ Update Order Summary
  function updateOrderSummary() {
    let subtotal = selectedItems.reduce(
      (sum, item) => sum + item.price * item.qty,
      0
    );
    let discount =
      subtotal > 1000 ? subtotal * 0.1 : subtotal > 500 ? subtotal * 0.05 : 0;
    let total = subtotal - discount;

    // ✅ Show selected items in the cart
    document.getElementById("selected-items").innerHTML = selectedItems
      .map(
        (item, index) => `
            <li class="list-group-item d-flex justify-content-between align-items-center">
                ${item.qty} x ${item.title} - ₹${item.price * item.qty}
                <button class="btn btn-sm btn-danger remove-item" data-index="${index}">X</button>
            </li>
        `
      )
      .join("");

    document.getElementById("subtotal").innerText = subtotal.toFixed(2);
    document.getElementById("discount").innerText = discount.toFixed(2);
    document.getElementById("total-price").innerText = total.toFixed(2);

    // ✅ Attach event listeners to remove buttons dynamically
    document.querySelectorAll(".remove-item").forEach((button) => {
      button.addEventListener("click", function () {
        let index = this.getAttribute("data-index");
        selectedItems.splice(index, 1);
        updateOrderSummary();
      });
    });
  }

  // ✅ Preview Order Before Saving
  document
    .getElementById("previewOrder")
    .addEventListener("click", function () {
      if (selectedItems.length === 0) return alert("No items in order!");

      document.getElementById("order-preview-list").innerHTML =
        document.getElementById("selected-items").innerHTML;
      document.getElementById("final-total").innerText =
        document.getElementById("total-price").innerText;

      let previewModal = new bootstrap.Modal(
        document.getElementById("previewOrderModal")
      );
      previewModal.show();
    });

  // ✅ Save Order
  document
    .getElementById("saveOrder")
    .addEventListener("click", async function () {
      if (selectedItems.length === 0) return alert("No items in order!");

      let response = await fetch("/orders/add", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          customerId: "<%= customer._id %>",
          items: selectedItems,
        }),
      });

      let result = await response.json();
      if (result.success) {
        alert("Order Added Successfully!");
        location.reload();
      } else {
        alert("Error adding order!");
      }
    });
</script>

<%- include("partials/footer") %>
